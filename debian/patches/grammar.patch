Index: rxvt-unicode-7.7/doc/rxvt.1.pod
===================================================================
--- rxvt-unicode-7.7.orig/doc/rxvt.1.pod	2006-04-27 10:01:14.000000000 -0400
+++ rxvt-unicode-7.7/doc/rxvt.1.pod	2006-04-27 10:03:06.000000000 -0400
@@ -44,17 +44,17 @@
 
 Therefore another design rationale was the use of multiple fonts to
 display characters: The idea of a single unicode font which many other
-programs force onto it's users never made sense to me: You should be able
+programs force onto its users never made sense to me: You should be able
 to choose any font for any script freely.
 
 Apart from that, rxvt-unicode is also much better internationalised than
-it's predecessor, supports things such as XFT and ISO 14755 that are handy
+its predecessor, supports things such as XFT and ISO 14755 that are handy
 in i18n-environments, is faster, and has a lot less bugs than the original
 rxvt. This all in addition to dozens of other small improvements.
 
 It is still faithfully following the original rxvt idea of being lean
 and nice on resources: for example, you can still configure rxvt-unicode
-without most of it's features to get a lean binary. It also comes with
+without most of its features to get a lean binary. It also comes with
 a client/daemon pair that lets you open any number of terminal windows
 from within a single process, which makes startup time very fast and
 drastically reduces memory usage. See @@RXVT_NAME@@d(1) (daemon) and
@@ -187,7 +187,7 @@
 smaller, but not (in general) larger. A (hopefully) reasonable default
 font list is always appended to it. See resource B<font> for more details.
 
-In short, to specify an X11 core font, just specify it's name or prefix it
+In short, to specify an X11 core font, just specify its name or prefix it
 with C<x:>. To specify an XFT-font, you need to prefix it with C<xft:>,
 e.g.:
 
@@ -425,7 +425,7 @@
 
 =item B<-embed> I<windowid>
 
-Tells @@RXVT_NAME@@ to embed it's windows into an already-existing window,
+Tells @@RXVT_NAME@@ to embed its windows into an already-existing window,
 which enables applications to easily embed a terminal.
 
 Right now, @@RXVT_NAME@@ will first unmap/map the specified window, so it
@@ -1030,7 +1030,7 @@
 can start or end with whitespace.
 
 Please note that you need to double the C<\> in resource files, as
-Xlib itself does it's own de-escaping (you can use C<\033> instead of
+Xlib itself does its own de-escaping (you can use C<\033> instead of
 C<\e> (and so on), which will work with both Xt and @@RXVT_NAME@@'s own
 processing).
 
@@ -1275,7 +1275,7 @@
 
 Start by pressing C<Control> and C<Shift> together, then releasing
 them. The next special key (cursor keys, home etc.) you enter will not
-invoke it's usual function but instead will insert the corresponding
+invoke its usual function but instead will insert the corresponding
 keycap symbol. The symbol will only be entered when the key has been
 released, otherwise pressing e.g. C<Shift> would enter the symbol for
 C<ISO Level 2 Switch>, although your intention might have been to enter a
@@ -1434,7 +1434,7 @@
 =item B<DISPLAY>
 
 Used by @@RXVT_NAME@@ to connect to the display and set to the correct
-display in it's child processes.
+display in its child processes.
 
 =item B<SHELL>
 
Index: rxvt-unicode-7.7/doc/rxvt.7.pod
===================================================================
--- rxvt-unicode-7.7.orig/doc/rxvt.7.pod	2006-04-27 10:03:06.000000000 -0400
+++ rxvt-unicode-7.7/doc/rxvt.7.pod	2006-04-27 10:03:06.000000000 -0400
@@ -316,7 +316,7 @@
 
 Many fonts have difficulties with italic characters and hinting. For
 example, the otherwise very nicely hinted font C<xft:Bitstream Vera Sans
-Mono> completely fails in it's italic face. A workaround might be to
+Mono> completely fails in its italic face. A workaround might be to
 enable freetype autohinting, i.e. like this:
 
    URxvt.italicFont:        xft:Bitstream Vera Sans Mono:italic:autohint=true
@@ -332,7 +332,7 @@
 =head3 Rxvt-unicode doesn't seem to anti-alias its fonts, what is wrong?
 
 Rxvt-unicode will use whatever you specify as a font. If it needs to
-fall back to it's default font search list it will prefer X11 core
+fall back to its default font search list it will prefer X11 core
 fonts, because they are small and fast, and then use Xft fonts. It has
 antialiasing disabled for most of them, because the author thinks they
 look best that way.
@@ -907,8 +907,8 @@
 =head3 Why does C<ls> no longer have coloured output?
 
 The C<ls> in the GNU coreutils unfortunately doesn't use terminfo to
-decide wether a terminal has colour, but uses it's own configuration
-file. Needless to say, C<rxvt-unicode> is not in it's default file (among
+decide wether a terminal has colour, but uses its own configuration
+file. Needless to say, C<rxvt-unicode> is not in its default file (among
 with most other terminals supporting colour). Either add:
 
    TERM rxvt-unicode
@@ -971,7 +971,7 @@
 applications so everybody agrees on character properties such as width
 and code number. This mechanism is the I<locale>. Applications not using
 that info will have problems (for example, C<xterm> gets the width of
-characters wrong as it uses it's own, locale-independent table under all
+characters wrong as it uses its own, locale-independent table under all
 locales).
 
 Rxvt-unicode uses the C<LC_CTYPE> locale category to select encoding. All
@@ -1140,7 +1140,7 @@
 B<wchar_t> is represented as unicode.
 
 As you might have guessed, FreeBSD does neither define this symobl nor
-does it support it. Instead, it uses it's own internal representation of
+does it support it. Instead, it uses its own internal representation of
 B<wchar_t>. This is, of course, completely fine with respect to standards.
 
 However, that means rxvt-unicode only works in C<POSIX>, C<ISO-8859-1> and
