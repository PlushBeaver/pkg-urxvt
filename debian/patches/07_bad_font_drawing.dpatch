#! /bin/sh -e
## 07_bad_font_drawing.dpatch by Eduard Bloch <blade@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: fixes completely broken font drawing, reverts suspicious CVS changes

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
       -patch) patch -f --no-backup-if-mismatch -p1 < $0;;
       -unpatch) patch -f --no-backup-if-mismatch -R -p1 < $0;;
	*)
		echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
		exit 1;;
esac

exit 0
				    
@DPATCH@
Index: src/rxvtfont.C
===================================================================
RCS file: /schmorpforge/rxvt-unicode/src/rxvtfont.C,v
retrieving revision 1.64
retrieving revision 1.62
diff -u -r1.64 -r1.62
--- a/src/rxvtfont.C	11 Jan 2005 05:45:57 -0000	1.64
+++ b/src/rxvtfont.C	11 Jan 2005 01:52:44 -0000	1.62
@@ -677,77 +677,68 @@
         }
     }
 
-  sprintf (field_str, "%d", prop.height == rxvt_fontprop::unset
-                              ? 0 : prop.height);
-
-  struct font_weight {
-    char *name;
-    int diff;
-
-    void clear ()
-    {
-      name = 0;
-      diff = 0x7fffffff;
-    }
-
-    font_weight () { clear (); }
-    ~font_weight () { free (name); }
-  };
-
   char **list;
   int count;
-  list = XListFonts (DISPLAY, name, 4000, &count);
+  list = XListFonts (DISPLAY, name, 1024, &count);
 
   set_name (0);
 
   if (!list)
     return false;
 
-  font_weight *fonts = new font_weight[count];
+  sprintf (field_str, "%d", prop.height == rxvt_fontprop::unset
+                              ? 0 : prop.height);
 
-  for (int i = 0; i < count; i++)
+  // the outer loop only re-runs when the guessed font-size is too small
+  for (;;)
     {
-      rxvt_fontprop p;
-      char fname[1024];
+      int bestdiff = 0x7fffffff;
+      int bestidx;
 
-      int diff = 0;
-
-      if (replace_field (fname, list[i], 6, '0', field_str))
-        diff += 10; // slightly penalize scalable fonts
+      for (int i = 0; i < count; i++)
+        {
+          rxvt_fontprop p;
+          char fname[1024];
 
-      if (!set_properties (p, fname))
-        continue;
+          int diff = 0;
 
-      if (prop.height != rxvt_fontprop::unset
-          && p.height > prop.height) // weed out too large fonts
-        continue;
+          if (replace_field (fname, list[i], 6, '0', field_str))
+            diff += 10; // slightly penalize scalable fonts
 
-      if (prop.height != rxvt_fontprop::unset) diff += (prop.height - p.height) * 128;
-      if (prop.weight != rxvt_fontprop::unset) diff += abs (prop.weight - p.weight);
-      if (prop.slant  != rxvt_fontprop::unset) diff += abs (prop.slant  - p.slant);
-      //if (prop.width  != rxvt_fontprop::unset) diff += abs (prop.width  - p.width);
+          if (!set_properties (p, fname))
+            continue;
 
-      fonts[i].name = strdup (fname);
-      fonts[i].diff = diff;
-    }
+          if (prop.height != rxvt_fontprop::unset
+              && p.height > prop.height) // weed out too large fonts
+            continue;
 
-  XFreeFontNames (list);
+          if (prop.height != rxvt_fontprop::unset) diff += (prop.height - p.height) * 128;
+          if (prop.weight != rxvt_fontprop::unset) diff += abs (prop.weight - p.weight);
+          if (prop.slant  != rxvt_fontprop::unset) diff += abs (prop.slant  - p.slant);
+          //if (prop.width  != rxvt_fontprop::unset) diff += abs (prop.width  - p.width);
 
-  // this loop only iterates when the guessed font-size is too small
-  for (;;)
-    {
-      font_weight *best = fonts + count - 1;
+          if (!name // compare against best found so far
+              || diff < bestdiff)
+            {
+              set_name (strdup (fname));
+              bestdiff = diff;
+              bestidx = i;
+            }
+        }
 
-      for (font_weight *w = best; w-- > fonts; )
-        if (w->diff < best->diff)
-          best = w;
+      if (!name)
+        {
+          XFreeFontNames (list);
+          return false;
+        }
 
-      if (!best->name
-          || !(f = XLoadQueryFont (DISPLAY, best->name)))
-        break;
+      f = XLoadQueryFont (DISPLAY, name);
 
-      set_name (best->name);
-      best->clear ();
+      if (!f)
+        {
+          XFreeFontNames (list);
+          return false;
+        }
 
       ascent  = f->ascent;
       descent = f->descent;
@@ -757,14 +748,15 @@
           || height <= prop.height)
         break; // font is ready for use
 
-      // PIXEL_SIZE small enough, but real height too large
+      // PIXEL_SIZE small enough, but real height too large:
+      // remove font from list by sewapping names and decreasing count
+      // slightly ugly, but probably works(tm)
+      --count;
+      SWAP_IT (list[bestidx], list[count], char *);
       clear ();
     }
 
-  delete [] fonts;
-
-  if (!f)
-    return false;
+  XFreeFontNames (list);
 
   char *registry = get_property (f, "CHARSET_REGISTRY", 0);
   char *encoding = get_property (f, "CHARSET_ENCODING", 0);
Index: src/rxvtfont.C
===================================================================
RCS file: /schmorpforge/rxvt-unicode/src/rxvtfont.C,v
retrieving revision 1.64
diff -u -r1.64 rxvtfont.C
--- a/src/rxvtfont.C	11 Jan 2005 05:45:57 -0000	1.64
+++ b/src/rxvtfont.C	22 Jan 2005 23:46:48 -0000
@@ -1092,7 +1092,7 @@
   FcValue v;
 
   if (prop.height != rxvt_fontprop::unset
-      || (FcPatternGet (p, FC_PIXEL_SIZE, 0, &v) != FcResultMatch
+      && (FcPatternGet (p, FC_PIXEL_SIZE, 0, &v) != FcResultMatch
           && FcPatternGet (p, FC_SIZE, 0, &v) != FcResultMatch))
     FcPatternAddInteger (p, FC_PIXEL_SIZE, prop.height);
 
